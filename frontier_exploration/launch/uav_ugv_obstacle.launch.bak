<launch>

    <!-- Set to your sensor's range -->
    <arg name="sensor_range" default="8.0"/>

    <node pkg="frontier_exploration" type="explore_client" name="explore_client" output="screen"/>

    <node pkg="frontier_exploration" type="explore_server" name="explore_server" output="screen" >

        <param name="frequency" type="double" value="2.0"/>
        <param name="goal_aliasing" type="double" value="$(arg sensor_range)"/>

        #All standard costmap_2d parameters as in move_base, other than BoundedExploreLayer
        <rosparam ns="explore_costmap" subst_value="true">
            footprint: [[-0.3, -0.3], [-0.3, 0.3], [0.3, 0.3], [0.35, 0.0], [0.3, -0.3]]
            footprint_padding: 0.5

            transform_tolerance: 0.5
            update_frequency: 5.0
            publish_frequency: 5.0

            #must match incoming static map
            global_frame: robot_1/map
            robot_base_frame: robot_1/base_link
            resolution: 0.05

            rolling_window: false
            track_unknown_space: true

            plugins:

                - {name: static_0,           type: "costmap_2d::StaticLayer"}
                - {name: explore_boundary, type: "frontier_exploration::BoundedExploreLayer"}
                #Can disable sensor layer if gmapping is fast enough to update scans
                - {name: sensor_0,           type: "costmap_2d::ObstacleLayer"}
                - {name: sensor_1,           type: "costmap_2d::ObstacleLayer"}
                - {name: inflation,        type: "costmap_2d::InflationLayer"}

            static_0:
                #Can pull data from gmapping, map_server or a non-rolling costmap
                map_topic: /robot_1/map
                # map_topic: move_base/global_costmap/costmap
                subscribe_to_updates: true

            explore_boundary:
                resize_to_boundary: false
                frontier_travel_point: middle
                #set to false for gmapping, true if re-exploring a known area
 
            sensor_1:
                observation_sources: laser
                laser: {data_type: LaserScan, clearing: true, marking: true, topic: robot_1/base_scan, inf_is_valid: true, raytrace_range: $(arg sensor_range), obstacle_range: $(arg sensor_range)}

            sensor_0:
                observation_sources: zed
                zed: {data_type: PointCloud2, clearing: true, marking: true, topic: robot_0/points, min_obstacle_height: -0.5, raytrace_range: 8.0, obstacle_range: 8.0}
                 
                


            explore_clear_space: false
            inflation:
                inflation_radius: 1.0
      </rosparam>
    </node>

</launch>
